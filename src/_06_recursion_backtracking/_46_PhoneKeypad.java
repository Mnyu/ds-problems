package _06_recursion_backtracking;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Given  : Number n and phone keypad(old type)
 * Find out all possible strings generated by pressing the individual digits of the number n.
 */
public class _46_PhoneKeypad {

    String[] keypad = new String[]{"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

    public List<String> getStrings(int num) {
        List<String> result = new ArrayList<>();
        char[] digits = String.valueOf(num).toCharArray();
        collectStrings(digits, 0, new StringBuilder(), result);
        return result;
    }

    private void collectStrings(char[] digits, int index, StringBuilder sb, List<String> result) {
        if (index == digits.length) {
            result.add(sb.toString());
            return;
        }
        int digit = Character.getNumericValue(digits[index]);
        String code = keypad[digit];
        for (char c : code.toCharArray()) {
            collectStrings(digits, index + 1, sb.append(c), result);
            sb.deleteCharAt(sb.length() - 1);
        }
    }

    public static void main(String[] args) {
        _46_PhoneKeypad obj = new _46_PhoneKeypad();
        System.out.println(obj.getStrings(23));
        System.out.println(obj.getStrings(234));
    }
    // Time Complexity : O(3^M) where M = no of digits in number
    // Space Complexity : O(M)
}
